/*
 * This source file was generated by the Gradle 'init' task
 */
package reactive.async.csv;

import reactor.adapter.JdkFlowAdapter;
import reactor.core.publisher.Flux;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.concurrent.Flow;

public class Library {
    public static void main(String[] args) {

        //ByteBuffer firstLine = ByteBuffer.wrap("abc,xyz,kkk".getBytes());
        //ByteBuffer secondLine = ByteBuffer.wrap("abc,xyz,kkk".getBytes());
        //ByteBuffer thirdLine = ByteBuffer.wrap("abc,xyz,kkk".getBytes());


        System.out.println("test");

        // Flux.fromArray(new ByteBuffer[]{firstLine, secondLine, thirdLine})
        //         .map(String::toUpperCase)
        //         .subscribe(System.out::println);


        ReactiveCsvParser parser = new FlowCsvParser();

        // Simulating streaming input
        Flux<ByteBuffer> byteBufferFlux = Flux.just(
                ByteBuffer.wrap("name,age\nJohn,30\nAl".getBytes()),
                ByteBuffer.wrap("ice,25\nBob,40\n".getBytes())
        );

        // Convert Flow.Publisher to Reactor Flux

        // Convert Flux to org.reactivestreams.Publisher
        org.reactivestreams.Publisher<ByteBuffer> reactivePublisher = ReactiveUtils.toPublisher(byteBufferFlux);

        // Convert org.reactivestreams.Publisher to java.util.concurrent.Flow.Publisher
        Flow.Publisher<ByteBuffer> flowPublisher = JdkFlowAdapter.publisherToFlowPublisher(reactivePublisher);

        Flow.Publisher<List<byte[]>> csvPublisher = parser.parse(flowPublisher);
        Flux<List<byte[]>> csvFlux = Flux.from(JdkFlowAdapter.flowPublisherToFlux(csvPublisher));

        csvFlux.subscribe(row -> {
            row.forEach(field -> System.out.print(new String(field) + " | "));
            System.out.println();
        });
      }
  }

